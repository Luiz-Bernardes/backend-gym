continue
DateTime.now.strftime("%d/%m/%Y %H:%M")
DateTime.now
Date.now
continue
params
params.inspect
params.inspect.format
params.inspect
params.inpect
params
request.env['REMOTE_ADDR']
request.env['HTTP_USER_AGENT']
params.inspect
action_name
controller_name
request.env['REMOTE_ADDR']
request.env['HTTP_USER_AGENT']
continue
!File.exists?(file_path)
continue
File.exists?("app/logs/user_2.txt")
File.exists?("app/logs/user_1.txt")
File.directory?("app/logs")
File.directory?("app/logs/user_1.txt")
File.directory?("app/logs/")
File.directory?("app/logggs/")
File.directory?("app/logs/")
File.directory?(app/logs/)
fileObj.syswrite("This file contains fff!\n");
fileObj = File.new("app/logs/user_1.txt", "w+");
fileObj.syswrite("This file contains eee!\n");
fileObj = File.new("app/logs/user_1.txt", "w+");
fileObj = File.new("log/user_activities/user_1.txt", "w+");
fileObj.syswrite("This file contains eee!\n");
fileObj.syswrite("This file contains ddd!\n");
fileObj.syswrite("This file contains ccc!\n");
fileObj.syswrite("This file contains bb!/n");
fileObj.syswrite("This file contains aa!/n");
fileObj.syswrite("This file contains more!");
fileObj.syswrite("This file contains knowledge!");
fileObj = File.new("tutorials.txt", "w+");
Rails.root
filename = Rails.root.join("/loggg/1.txt")
file = File.dirname("#{Rails.root}/loggg/1.txt")
dir = Dir.mkdir("#{Rails.root}/loggg")
dir = Dir.mkdir("#{Rails.root}/loggg/#{self.id}")
continue
Rails.root.join("/log/user_#{id}.txt")
continue
dir = Dir.mkdir("#{Rails.root}/log/#{self.id}")
Rails.logger.info "Hello, Rails Logger!"
continue
self.controller
self
continue
self
self.controller
self
continue
ENV
include ActionView::Helpers::UrlHelper
request
params
Rails.request
Rails.application.request
Rails.application.reload_routes!
request
method
record
continue
record
record.new_record? 
record.class
record
continue
record.class.name
record.new_record?
record.new?
record.id
record
object
record
continue
record.class.name
record
record.new?
record.class.name
record
continue
@payment.value.class
continue
gym_params
continue
@client.valid?
@client
continue
client.save!
client
continue
Client.last
client.save!
client.valid?
client
continue
client.save!
client.gym_id
client.save
client.gym_id = current_user.gym.id
client = Client.new(params)
continue
Client.where(gym_id: @current_api_v1_user.gym.id)
@current_api_v1_user.gym.id
Client.where(gym_id: @current_api_v1_user.gym.id)
Client.all
@current_api_v1_user.gym.id
@current_api_v1_user.gym
@current_api_v1_user
continue
@gym.users.where(user_type: "client")
@gym.users
@gym.count_clients
continue
self.users.where(user_type: "client").count
self.users.where(user_type: "clients").count
self.users.where(user_type: "client").count
self.users.where(user_type: "client")
self.users.where(user_type: "clients")
self.users
self.clients
self.users
self
continue
get "/api/v1/admins.json", headers: {'ACCEPT' => "application/json"}
continue
get "/api/v1/admins.json"
@request.headers.merge!({'Accept': 'application/json'})
@request
get "/api/v1/admins.json"
continue
@request
continue
@request
get "/api/v1/admins.json"
get "/api/v1/admins.json", {'ACCEPT' => "application/json"}
get "/api/v1/admins.json", {'HTTP_ACCEPT' => "application/json"}
get "/api/v1/admins.json", nil, {'HTTP_ACCEPT' => "application/json"}
get "/api/v1/admins.json"
continue
get "/api/v1/admins.json"
response
request
continue
request.host
request
continue
request.host
request.url
request
request.class
request
continue
request
request.get
request
request.class
request.name
request
continue
response
request
continue
response
continue
response
continue
response
continue
response
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
continue
@current_api_v1_user
@current_useraaa
@current_user
continue
create(:admin, email: "aaa@mail.com")
create(:admin)
continue
user.name = "aaa"
user = User.new
create(:admin, email: "mail@mail.com")
create(:admin)
continue
self
self.object_id
self.object
self
self.emails
self.email
self
continue
@user.save!
@user.save
@user.emails
@user = User.new(user_params)
continue
AdminSerializer(self.users.find_by(user_type: ADMIN))
self.users.find_by(user_type: ADMIN)
continue
@gym.owner
@gym
continue
@admin.name
@gym
@gym.owner
@gym.owner.name
continue
@gym.owner
continue
@admin.name
@admin
@gym.owner.name
continue
@gym.owner.name
@gym.owner
continue
self.users.find_by(user_type: "admin")
self.users
continue
self.users.find_by(user_type: "admin")
self.users
self.users.user_type
self.users
self.uers
self
continue
self.users
self.admin
self
self.users
self.user
self
@gym
continue
Gym.find(params_id)
gym_find_by_slug.present?
