continue
get "/api/v1/admins.json", headers: {'ACCEPT' => "application/json"}
continue
get "/api/v1/admins.json"
@request.headers.merge!({'Accept': 'application/json'})
@request
get "/api/v1/admins.json"
continue
@request
continue
@request
get "/api/v1/admins.json"
get "/api/v1/admins.json", {'ACCEPT' => "application/json"}
get "/api/v1/admins.json", {'HTTP_ACCEPT' => "application/json"}
get "/api/v1/admins.json", nil, {'HTTP_ACCEPT' => "application/json"}
get "/api/v1/admins.json"
continue
get "/api/v1/admins.json"
response
request
continue
request.host
request
continue
request.host
request.url
request
request.class
request
continue
request
request.get
request
request.class
request.name
request
continue
response
request
continue
response
continue
response
continue
response
continue
response
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
@current_user
continue
@current_api_v1_user
continue
@current_api_v1_user
@current_useraaa
@current_user
continue
create(:admin, email: "aaa@mail.com")
create(:admin)
continue
user.name = "aaa"
user = User.new
create(:admin, email: "mail@mail.com")
create(:admin)
continue
self
self.object_id
self.object
self
self.emails
self.email
self
continue
@user.save!
@user.save
@user.emails
@user = User.new(user_params)
continue
AdminSerializer(self.users.find_by(user_type: ADMIN))
self.users.find_by(user_type: ADMIN)
continue
@gym.owner
@gym
continue
@admin.name
@gym
@gym.owner
@gym.owner.name
continue
@gym.owner
continue
@admin.name
@admin
@gym.owner.name
continue
@gym.owner.name
@gym.owner
continue
self.users.find_by(user_type: "admin")
self.users
continue
self.users.find_by(user_type: "admin")
self.users
self.users.user_type
self.users
self.uers
self
continue
self.users
self.admin
self
self.users
self.user
self
@gym
continue
Gym.find(params_id)
gym_find_by_slug.present?
gym = gym_find_by_slug.present? ? gym_find_by_slug : Gym.find(params_id)
gym_find_by_slug = Gym.find_by(slug: params_id)
Gym.find_by(slug: params_id)
params_id
params
continue
x.class.name == "Gym"
x.class.name
x.class
x = GymService.find_by_slug_or_id(@gym.slug)
x = GymService.find_by_slug_or_id(@gym.name)
x = GymService.find_by_slug_or_id(@gym.id)
x = GymService.find_by_slug_or_id(@gym.name)
x = GymService.find_by_slug_or_id(@gym.id)
Gym.all
x = GymService.find_by_slug_or_id(1)
continue
Gym.all
x = GymService.find_by_slug_or_id(1)
continue
params
para,s
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
para,s
continue
@exercise = Exercise.new(exercise_params)
continue
exercise_params
@exercise
continue
@exercise.save!
@exercise.save
@exercise = Exercise.new(exercise_params)
continue
response.body
@training
continue
@client.weight.to_s
continue
@client.weight.to_s
response.body.to_s
response.body.to_f
@client.weight
continue
@user.gym
@user
continue
response.body
continue
build(:telephone, gym: create(:gym)).attributes
build(:telephone).attributes
attributes_for(:telephone)
continue
@telephone.gym.id
@telephone.gym
@telephone.gyms
@telephone
@telephone.emails
@telephone
continue
email = Email.last
Email.last
continue
@email
response.body
continue
response.body
continue
response.body
continue
response.body
continue
response.body
continue
get :index
continue
get :index
continue
render json: serialize_record(@record, options)
continue
render json: serialize_record(@record, options)
@record
 render json: serialize_record(@record, options), status: :created
@record
render json: serialize_record(@record, options), status: :created
continue
@record.trainings.first
@record.trainings
@record
continue
@record.exercises.first.trainings
@record.trainings.first.exercises
@record.trainings.first
@record.trainings
@record.exercises
continue
record_params
continue
@record.exercises.first.qnt_series
@record.exercises.first.qnt_series.class
@record.exercises.first.qnt_series
@record.exercises.first
@record.exercises
@record.exercices
@record.trainings
@record
continue
record_params
continue
record_params
continue
record_params
continue
record_params
continue
params.require(:record)
params.permit(:record)
params
continue
